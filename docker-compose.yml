services:
  # 1. 您的 FastAPI 应用服务
  app:
    build: . # 使用当前目录的 Dockerfile
    container_name: weather_service_app
    env_file:
      - .env # 加载 .env 文件中的环境变量
    ports:
      - "8000:8000" # 将主机的 8000 端口映射到容器的 8000 端口
    volumes:
      - ./app:/code/app # 挂载 app 目录，实现代码热重载
    depends_on:
      - db
      - redis
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # 2. 数据库服务 (使用 MySQL 示例)
  db:
    image: mysql:8.0
    container_name: weather_service_db
    environment:
      MYSQL_ROOT_PASSWORD: root_password # root 密码
      MYSQL_DATABASE: weather_db # 数据库名称 (匹配 .env)
      MYSQL_USER: weather_user # 用户名 (匹配 .env)
      MYSQL_PASSWORD: weather_pass # 密码 (匹配 .env)
    volumes:
      - db_data:/var/lib/mysql # 数据持久化
    ports:
      - "3307:3306" # 映射到主机的 3307 端口 (避免与本地 3306 冲突)

  # 3. Redis 服务
  redis:
    image: redis:alpine
    container_name: weather_service_redis
    volumes:
      - redis_data:/data # 数据持久化
    ports:
      - "6380:6379" # 映射到主机的 6380 端口 (避免与本地 6379 冲突)

# 定义 Docker 卷用于数据持久化
volumes:
  db_data:
  redis_data: